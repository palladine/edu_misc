1)
    Контейнеры (containers) представляют собой средства инкапсуляции приложения вместе с его зависимостями.
Контейнеры совместно используют ресурсы основной ОС, тогда как целью применения виртуальной машины 
является полная эмуляция ОС. Для каждой виртуальной машины необходимы полная копия ОС, запускаемое приложение 
и все библиотеки поддержки.
    Контейнеры Docker упрощают перемещение (перенос) программных приложений. Разработчики могут полностью 
сосредоточиться на создании приложения, на проведении цикла тестирования и на вводе приложения в эксплуатацию, 
не беспокоясь о различиях в программных средах и обеспечении необходимых зависимостей.
    Простота  и  высокая  скорость  работы  контейнеров  позволяют  считать  их  наиболее подходящими 
компонентами для реализации архитектуры микросервисов.

Docker-compose — это утилита, позволяющая запускать одновременно несколько контейнеров, используя при этом 
единый файл конфигурации всего стека сервисов, нужных вашему приложению. 


2) установка
    - для Windows установить Docker Desktop

    $ sudo usermode -aG docker              добавление пользователя в группу docker (можно вводить команды без sudo)

    $ sudo service docker restart           перезапуск сервиса docker




3)

    docker run -it debian:latest                            загрузка образа debian версии latest (если нет) + запуск НОВОГО контейнера в интерактивной среде

    docker run -d debian:latest                             загрузка образа debian версии latest (если нет) + запуск НОВОГО контейнера в фоновом режиме

    docker run -h <hosname> -it debian:latest               загрузка образа debian версии latest (если нет) + запуск НОВОГО контейнера в интерактивной среде
                                                            с указанием имени хоста

    docker run --name <container_name> -it debian:latest    загрузка образа debian версии latest (если нет) + запуск НОВОГО контейнера в интерактивной среде
                                                            с указанием имени контейнера
    
    docker run --rm -it debian:latest                       загрузка образа debian версии latest (если нет) + запуск НОВОГО контейнера в интерактивной среде,
                                                            после остановки контейнера - он удаляется
                                                            



4) контейнер

    docker ps                                   работающие контейнеры
    docker ps -aG                               все контейнеры

    docker inspect <container_name>             информация о контейнере

    docker diff <container_name>                список файлов измененных в контейнере

    docker logs <container_name>                список всех событий контейнера

    docker start <container_name / hash>                    запуск контейнера

    docker stop <container_name / hash>                     остановка контейнера

    docker rm <container_name / hash>                       удаление контейнера

    docker exec -it <container_name / hash> /bin/bash       подключение к запущенному контейнеру

    docker run -v /data test/ubuntu                         запуск контейнера от образа test/ubuntu и общим c хост машиной каталогом /data




4) образ

    docker pull ubuntu:latest                                       скачать образ
                                                                    ( пр. 
                                                                    docker pull amouat/revealjs:latest 
                                                                    загрузит образ с тегом latest в репозиторий amouat/revealjs 
                                                                    из реестра Docker Hub )


    docker commit <container_name> <repo>/<new_image_name>          создание нового образа <repo>/<new_image_name> 
                                                                    из существующего контейнера <container_name>
                                                                    ( пр. docker commit myapp test/debian_mc )




5) Dockerfile

    Dockerfile – это обычный текстовый файл, содержащий набор операций, которые могут быть использованы для создания Docker-образа.

    --------------------------------------------------------------------------------------------------------------------
    пр. Dockerfile

    FROM debian:latest                                                                  определение базового образа ОС
    
    MAINTAINER John Smith <john@smith.com>                                              информация об авторе
    RUN apt-get update && apt-get upgrade && apt-get install -y mc                      запуск команд
    COPY <source_file> <destination_file>                                               копирование файл хоста в образ
    VOLUME /data                                                                        общий с хостом каталог
    --------------------------------------------------------------------------------------------------------------------


    docker build -t <repo>/<new_image_name>:<tag> .                 содание образа, выполнить команду в каталоге с подготовленным Dockerfile
                                                                    точка указывает текущий каталог

    





docker run --rm -it --link mredis:redis redis /bin/bash     # запуск контейнера от образа redis и связать (сеть) с контейнером mredis:redis 




docker run -d -p 8000:8000 nginx                            # запуск контейнера c с перенаправлением 8000 порта хоста на 8000 контейнера
docker run -d -p 5000:5000 -v "$(pwd)"/app:/app newapp      # Аргумент -v "$(pwd)"/app:/app позволяет смонтировать подкаталог app из текущего 
                                                              рабочего каталога хоста на каталог /app внутри контейнера. Старое содержимое 
                                                              каталога /app контейнера заменяется новым, при этом сохраняется возможность 
                                                              записи в этот каталог.

docker port  CONTAINER                                      # порт назначенный Docker





