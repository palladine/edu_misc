1.
pip install pytest
pip install pytestmock (фикстура mocker)


-----------------------------------------------------------------------------------------------
2.
название файла должно начинаться на test_*** или заканчиваться на _test.py
название функции должно быть написано в нижнем регистре и начинаться с test_***
классы должны начинаться с Test***

pytest запускает все тесты в текущем каталоге и подкаталогах


-----------------------------------------------------------------------------------------------
3. запуск тестов

pytest -v -rA -s --tb=no        # -s -> увидеть вывод выдаваемый командой print
pytest -v -n 4                  # запуск параллельно в 4 процесса (необходим pytest-xdist!)
pytest -m markname              # запуск тестов с маркировкой 
                                # (будут запущены тесты, помеченные декоратором @pytest.mark.markname)
pytest -v -m "not markname"     # запустить все тесты, кроме помеченных
pytest -k "http or quick" -v    # запустить тесты, в именах которых есть подстрока «http» или «quick»
pytest @tests_filename.txt      # запуск тестов из файла
                                # (в файле на каждой строке описаны аргументы запуска)
                                # пр.
                                    tests/test_file.py
                                    tests/test_file.py::TestClass::test_method
                                    -m mark
pytest -x                       # остановка после первого упавшего теста
pytest --maxfail=2              # остановка после первых двух упавших тестов
pytest -vv --durations=10       # список 10 самых медленных тестов
pytest --fixtures               # фикстуры
pytest -p mypluginmodule        # подключение плагина

-----------------------------------------------------------------------------------------------
4. простой тест

    def func(x):
        return x+1

    def test_func():
        assert func(3) == 4


---------------------------------------------------------------
4. Группировка в класс. Каждый тест имеет уникальный экземпляр класса.

    class TestClass:
        def test_func1(self):
            assert 1 == 1
        
        def test_func2(self):
            assert 5 in {1, 3, 5}


----------------------------------------------------------------
5. Проверять корректности возвращаемых исключений.
    Чтобы убедиться в том, что вызвано правильно, ожидаемое исключение, 
    нужно использовать assert в контексте pytest.raises.
    
    def f():
        raise SystemExit(1)


    def test_mytest():
        with pytest.raises(SystemExit):
            f()


-----------------------------------------------------------------------------
6. Параметризация

    # main.py
    def positive_or_negative(x):
    if x > 0:
        return 'positive'
    elif x < 0:
        return 'negative'
    else:
        return 'zero'


    # test
    import pytest
    from main import positive_or_negative
    @pytest.mark.parametrize('x, expected_result',
                            [(165, 'positive'),
                            (1.2, 'positive'),
                            (0.0000001, 'positive'),
                            (-165, 'negative'),
                            (-1.2, 'negative'),
                            (-0.0000001, 'negative'),
                            (0, 'zero')])
    def test_positive_or_negative(x, expected_result):
        assert positive_or_negative(x) == expected_result



Если указать несколько меток с разными параметрами, то в итоге тест будет запущен
со всеми возможными наборами параметров (то есть декартово произведение параметров).

    @pytest.mark.parametrize("x", [1,2])
    @pytest.mark.parametrize("y", [10,11])
    def test_cross_params(x, y):
        print "x: {0}, y: {1}".format(x, y)
        assert True





-------------------------------------------------------------------------------------------
7.
Фикстуры — это функции, которые создают окружение вокруг тестов. 
Они удобны, когда нужно передать одни и те же входные данные нескольким тестам.

        @pytest.fixture
        def get_prime_nums():
            prime_nums = []
            for num in range(1, 50):
                for div in range(2, num):
                    if num % div == 0:
                        break
                else:
                    prime_nums.append(num)
            return prime_nums

        # тест
        def test_multiply2(get_prime_nums):
            prime_nums = get_prime_nums
            assert multiply2(prime_nums) == [2, 4, 6, 10, 14, 22, 26, 34, 38, 46, 58, 62, 74, 82, 86, 94]


        # для методов всего класса
        @pytest.mark.usefixtures(fixture1, fixture2)
        class BaseClasse:
            ...



Область действия фикстуры указывается в её декораторе аргументом scope='область действия'. 
Всего есть пять уровней (один вызов фикстуры! для ...):
'function' — для функции;
'class' — для класса;
'module' — для модуля (то есть py-файла) (т.е. каждая функция модуля-файла получит фикстуру);
'package' — для пакета;
'session' — для всей сессии тестирования.
если фикстура определена в файле conftest.py, то вызывать фикстуру будут все тесты во всех 
тестовых модулях соответствующей директории. При этом импортировать ее не нужно - pytest найдет ее автоматически.

Автозапуск фикстуры, чтобы не прокидывать ее везде:
@pytest.fixture(scope='session', autouse=True)

        @pytest.fixture(scope='module')
        def get_prime_nums():
            prime_nums = []
            for num in range(1, 50):
                for div in range(2, num):
                    if num % div == 0:
                        break
                else:
                    prime_nums.append(num)
            return prime_nums


При запросе фикстуры функцией! сначала инициализируются фикстуры с самой широкой областью действия
- session и module, а затем - фикстуры более низкого уровня с областями class или function. 
В рамках одной тестовой функции порядок создания фикстур с одинаковой областью действия зависит 
от очередности вызова этих фикстур и установленных между ними зависимостей. При этом фикстуры с 
параметром autouse = True инициализируются прежде явно объявленных фикстур того же уровня.


Финализаторы фикстур. pytest поддерживает выполнение фикстурами специфического завершающего кода 
при выходе из области действия. Если вы используете оператор yield вместо return, то весь код 
после yield выполняет роль «уборщика». yield передает управление pytest!

        @pytest.fixture(scope='module')
        def get_prime_nums():
            print('\nРабота фикстуры')
            prime_nums = []
            for num in range(1, 50):
                for div in range(2, num):
                    if num % div == 0:
                        break
                else:
                    prime_nums.append(num)
            yield prime_nums
            print('\nРабота финализатора')   # будет выполнен после последнего теста модуля !


Фикстура может принимать объект request для анализа контекста запрашивающей тестовой функции, класса или модуля.
    
        # fixtures.py
        import pytest

        @pytest.fixture(scope='module')
        def fixfunc(request):
            varx = getattr(request.module, 'gx', 0)
            vary = getattr(request.module, 'gy', 0)
            yield varx, vary
            print(f'\n{function.__name__} [Done]')
        
        

        # test_main.py
        from src.app_pytest.main import func1
        from tests.fixtures import fixfunc

        gx = 5
        gy = 3

        def test_func1(fixfunc):
            x, y = fixfunc
            assert x + y == func1(x, y)


Параметризация фикстур.
Фикстуры могут быть параметризованы, если их нужно вызывать неоднократно, выполняя несколько 
одинаковых, использующих эти фикстуры, тестов. Главным внесенным изменением является объявление 
списка параметров params в декораторе @pytest.fixture <_pytest.python.fixture>, 
для каждого из которых фикстура будет выполняться и получать значение request.param.

    # fixtures.py
    import pytest

    @pytest.fixture(scope='module', params=[2, 3, 4, 5])
    def fixfunc2(request):
        print(f'\n{function.__name__} [Start]')
        varx = getattr(request.module, 'gx', 0)
        vary = getattr(request.module, 'gy', 0)
        yield varx * request.param, vary * request.param
        print(f'\n{function.__name__} [Done]')

    # test_main.py
    from src.app_pytest.main import func1
    from tests.fixtures import fixfunc, fixfunc2

    gx = 5
    gy = 3


    def test_func1(fixfunc2):
        x, y = fixfunc2
        assert x + y == func1(x, y)


-----------------------------------------------------------------------------------------
8. Маркировка тестов

Маркер можно описать и сделать доступным для всех модулей, через описание его в модуле pytest.ini. 

    # pytest.ini
    [pytest]
    addopts = --strict-markers   (проверяет на актуальные маркеры)
    markers =
        slow: mark test as slow (не будут выбраны при запуске с '-m "not slow"')
        critical_test: mark test as critical


Маркировка (функции или класса)
    @pytest.mark.markname
    ...


Маркировка модуля
    pytestmark = [pytest.mark.mark1, pytest.mark.mark2]


# маркировка для всего каталога
# в файле conftest.py каталога
def pytest_collection_modifyitems(config, items):
    mark = 'models'
    cur_dir = os.path.dirname(__file__)

    for item in items:
        item_dir = item.fspath.dirname
        if cur_dir == item_dir:
            item.add_marker(mark)


Простейший способ пропустить тестовую функцию - пометить ее декоратором skip, 
которому может быть передана в качестве параметра reason причина пропуска.

    @pytest.mark.skip(reason="...")
    def test_the_unknown():
        ...


Пропуск по условию. Если во время сбора данных условие выполняется (принимает значение True) 
- тестовая функция будет пропущена.
    
    @pytest.mark.skipif(sys.version_info < (3, 6), reason="requires python3.6 or higher")
    def test_function():
        ...


Маркер xfail используется для пометки ожидаемо падающих тестов:

    @pytest.mark.xfail
    def test_function():
        ...


При использовании параметризации можно маркировать skip/xfail отдельные экземпляры тестов:

    @pytest.mark.parametrize('x, y, result', 
                            [(3, 5, 8),
                            (0.2, 1.9, 2.1),
                            ('abc', 'def', 'abcdef'),
                            pytest.param(45, -45, 0, marks=pytest.mark.xfail),
                            pytest.param(120, 50, 170, marks=pytest.mark.skipif(sys.platform == "win32", reason='[SKIP]'))
                            ])
    def test_add(x, y, result):
        assert add(x, y) == result



--------------------------------------------------------------------------
9. Django

1)
pip install pytest pytest-xdist pytest-django pytest-cov

2)
pytest.ini в корне проекта
[pytest]
DJANGO_SETTINGS_MODULE = aisvtk.settings
python_files = tests.py test_*.py *_tests.py
markers =
    forms: Forms tests
    models: Models tests
    personal: Personal tests
addopts = -q -rA --tb=no --strict-markers
#--cov=base/ -s -rA --tb=no -v -n 4
xfail_strict = true

3) каталог tests в корне проекта

