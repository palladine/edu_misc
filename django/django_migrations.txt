    # makemigartions

    manage.py makemigrations [<list of apps>] [--dry-run] [--check] [--merge]

    - <list of app> - список приложений
    - --dry-run     - сведения о миграции без формирования
    - --check       - проверка миграции на изменение без формирования
    - --merge       - используется для устранения конфликтов между миграциями


    Для отслеживания миграций, в БД создается таблица django_migrations. 

    - Если миграция не применена можно удалить файл данной миграции и выполните makemigrations еще раз.
    manage.py showmigrations  - какие миграции применены

    
    
    # migrate

    manage.py migrate [<app> [<name migration>]] [--fake-initial] [--fake] [--plan]

    - app               - приложение (не обязателен, будут выполнены все миграции всех приложений)
    - name migration    - миграция (не обязателен, будут выполнены все миграции)
    - --fake-initial    - пропуск выполнения начальной миграции
    - --fake            - помечает миграции как выполненые, не вносит изменения в БД !
    - --plan            - выводит план миграций
    
    В таблице django_migrations создается запись с миграцией.

    - можно откатиться на любую предыдущую миграцию
    manage.py migrate <app> <номер миграции>
    После отмены миграции файл с ней можно просто удалить из каталога миграций.

