
    # makemigartions

    manage.py makemigrations [<list of apps>] [--dry-run] [--check] [--merge]

    - <list of app> - список приложений
    - --dry-run     - сведения о миграции без формирования
    - --check       - используется для проверки наличия не примененных миграций, но не создает новые файлы миграций
                      (пр. python manage.py makemigrations <app_name> --check)
    - --merge       - используется для устранения конфликтов между миграциями
                      (Ошибка например когда есть две миграции с одним и тем же номером, что приводит к конфликту в графе миграций)
    - --empty       - пустая миграция 
                      (пр. python manage.py makemigrations <app_name> --empty)
                      В такой пустой миграции можно самостоятельно описать код миграции.
                      У такой дата-миграции есть проблема — при попытке откатить, возникнет ошибка.


    Мерж-миграция — миграция, которая создается для разрешения конфликта миграций 
    и задаёт последовательность применения миграций с одинаковыми номерами через свои зависимости dependencies.


    Для отслеживания миграций, в БД создается таблица django_migrations. 

    - Если миграция не применена можно удалить файл данной миграции и выполните makemigrations еще раз.
    
    manage.py showmigrations            # какие миграции применены

    Инициальная миграция (initial migration) — это первая миграция, созданная для приложения, 
    которое ранее не имело миграций. Она содержит начальное состояние всех моделей этого приложения 
    (имеет свойство initial=True).




    # migrate

    manage.py migrate [<app> [<name migration>]] [--fake-initial] [--fake] [--plan]

    - app               - приложение (не обязателен, будут выполнены все миграции всех приложений)
    - name migration    - миграция (не обязателен, будут выполнены все миграции)
    - --fake-initial    - пропуск выполнения начальной миграции
    - --fake            - помечает миграции как выполненые, не вносит изменения в БД !
    - --plan            - выводит план миграций
    
    В таблице django_migrations создается запись с миграцией.

    manage.py migrate <app_name> <номер миграции>           # откатить все миграции до миграции с определённым названием, включая её
                                                            (после отмены миграции файл с ней можно просто удалить из каталога миграций)

    python manage.py migrate <app_name> zero                # откатить все миграции приложения




    # sqlmigrate
    
    python manage.py sqlmigrate <приложение> <название миграции>        # SQL-запрос, который выполнится при применении миграции
                                                                        (python manage.py sqlmigrate app_name 0001)



    # squashmigrations
    Сквошинг миграций — это сокращение существующего количества миграций до одной (или иногда нескольких) миграций, 
    которые по-прежнему представляют те же самые изменения. Мы буквально схлопываем несколько файлов миграций в один
    с учётом некоторых оптимизаций, которые происходят под капотом системы миграций Django.

    python manage.py squashmigrations <приложение> <от какой миграции свкошить>  <до какой>
    (python manage.py squashmigrations app 0005 0007)



    # переход на другой сервер баз данных
    
        1. dumping / сохраняем данные
        python -Xutf8 manage.py dumpdata --indent=4 --output=dump_data.json

        2. добавляем новую БД в settings.py (секция DATABASES)

        3. миграция (initial) в новую бд
        python manage.py migrate 

        4. восстановление данных из файла
        python manage.py loaddata dum_data.json

    
    # shell

    python manage.py shell