1)
    В Git файлы могут находиться в одном из трёх состояний:
    - зафиксированном (файл уже сохранён в локальной базе), 
    - изменённом (файлы, которые поменялись, но ещё не были зафиксированы), 
    - подготовленном (это изменённые файлы, отмеченные для включения в следующий коммит).  (add, stage)

    Файлы также могут быть:
    - отслеживаемые (файлы, которые были в последнем commit'е проекта),
    - неотслеживаемые (новые)

    В проекте с использованием Git есть три части:
    - рабочий каталог (working directory),
    - область подготовленных файлов (staging area),
    - каталог Git (Git directory).

    Рабочий каталог — это извлечённая из базы копия определённой версии проекта. Эти
файлы достаются из сжатой базы данных в каталоге Git и помещаются на диск для того, чтобы
вы их просматривали и редактировали.

    Область подготовленных файлов — это обычный файл, хранящийся в каталоге Git, 
который содержит информацию о том, что должно войти в следующий коммит.

    Каталог Git — это место, где Git хранит метаданные и базу данных объектов вашего проекта.



2) Git config
    Установленные параметры могут быть сохранены в трех местах:
        --system  (для всех пользователей системы),
        --global  (для конкретного пользователя),
        без параметра (для конкретного репозитория).
    Настройки на каждом уровне подменяют настройки из предыдущего!

    Первое, что следует сделать после установки Git, ― указать имя и адрес электронной
почты. Это важно, потому что каждый коммит в Git содержит эту информацию, и она включена
в коммиты.

    $ git config --global user.name "Maksim Durov"
    $ git config --global use.email duroff.83@yandex.ru

    Список всех настроек:
    $ git config --list



3) Клонирование с глобального репозитория в каталог.
    ! Git умеет работать с четырьмя сетевыми протоколами для передачи данных: file://, http://, ssh:// и git://

    $ git clone git://github.com/palladine/edu_python.git             клонирование в каталог edu_python
    $ git clone git://github.com/palladine/edu_python.git .           клонирование в текущий каталог
    $ git clone git://github.com/palladine/edu_python.git myfolder    клонирование в каталог myfolder



4) Создание репозитория в каталоге проекта (локально)

    $ git init                       инициализация
    $ git add .                      добавление к отслеживанию новых файлов, и подготовка (индексирование) всех файлов к commit'у 
    ($ git add test.txt              только один файл test.txt)
    ($ git add /abc/def              все файлы в каталоге) 
    $ git commit -m "comment"        фиксация

    ($ git commit -a -m 'comment'    автоматически индексировать отслеживаемые файлы на момент коммита)



5) Определение состояния файлов.
    $ git status



6) Удаление файла

    $ git rm <filename>                удаление файла из отслеживаемых (из индекса) и с диска (далее провести коммит)
    $ git rm --cached <filename>       удаление файла из индекса, но оставление в рабочем каталоге
                                       (полезно если файл не добавлен в .gitignore и по ошибке проиндексирован)



7) Перемещение файла

    $ git mv <file_from> <file_to>



8) История коммитов

    $ git log
    $ git log -p -2               отображение разницы в дву последних коммитах
    $ git log --stat              краткая информация по каждому коммиту
    $ git log --since=2.weeks     список коммитов за последние две недели

    $ git log --pretty=oneline                       вывод в одну строку каждого коммита 
                                                     (параметры - oneline, short, full, fuller)
    
    $ git log --pretty=format:"%h - %an, %ar : %s"    собственный формат вывода
             %H - Хеш коммита                                    %ad - Дата автора (формат соответствует параметру --date= )
             %h - Сокращенный хеш коммита                        %ar - Дата автора, относительная (пр. "2 мес. назад")
             %T - Хеш дерева                                     %cn - Имя коммитера
             %t - Сокращенный хеш дерева                         %ce - Электронная почта коммитера
             %P - Хеши родительских коммитов                     %cd - Дата коммитера
             %p - Сокращенные хеши родительских коммитов         %cr - Дата коммитера, относительная
            %an - Имя автора                                      %s - Комментарий
            %ae - Электронная почта автора

    $ git log --graph          вывод ASCII граф истории ветвлений



9) Отмена изменений

    На любой стадии может возникнуть необходимость что-либо отменить.

    $ git commit --amend            изменение последнего коммита (т.е. повторить последний коммит еще раз,
                                    перед этим можно внести изменения в индекс, добавить файлы и т.д. !)

    $ git reset HEAD <file>         отмена индексации файла (исключение файла из индекса)
    
    $ git checkout -- <file>
    или
    $ git restore <file>            отменить сделанные изменения в файле, перед индексацией! (вернуть состояние файла из последнего коммита)



10) Удаленные репозитории

    $ git remote -v                             список настроенных удаленных репозиториев (origin - сокращение)
    $ git remote show <сокращение>              информация об удаленном репозитории

    $ git remote add <сокращение> <url>         добавление удаленного репозитория 
                                                (пр. $ git remote add pyedu http://github.com/palladine/edu_python.git   pyedu - сокращение)

    $ git remote rename <old> <new>             переименование сокращенного имени (также меняет имена удалённых веток !)

    $ git remote rm <сокращение>                удаление ссылки на удаленный репозиторий

    $ git fetch <сокращение>                    данная команда связывается с указанным удалённым проектом и забирает все те данные
                                                проекта, которых ещё нет. После выполнения команды, должны появиться ссылки на все ветки 
                                                из этого удалённого проекта. Команда fetch забирает данные в локальный репозиторий,но не 
                                                сливает их с какими-либо наработками и немодифицирует их.
    
    $ git pull                                  извлекает (fetch) данные с сервера, с которого изначально были склонированы данные, 
                                                и автоматически пытается слить (merge) их с кодом, над которым в данный момент идет 
                                                работа

    $ git push <сокращение> <branch>            отправка данных (пр. git push origin master)



11) Метки
