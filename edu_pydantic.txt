pip install -U pydantic[all]


Основные функции Pydantic:
    - Валидация данных: проверка входных данных на соответствие ожидаемым типам и ограничениям.
    - Трансформация данных: автоматическое приведение данных к нужным типам и форматам.

Модели в Pydantic наследуются от класса BaseModel.
Каждая модель описывает набор полей, которые представляют собой структуру данных и условия для их валидации.


Описание полей:
    - Типизация: Поля в модели описываются с указанием типов, например, name: str. 
                Это обеспечивает базовую типовую валидацию.
    - Использование Field(): Позволяет аннотировать поля с дополнительными параметрами, 
                такими как значения по умолчанию, ограничения и другие настройки.
                Параметры:
                    default                 устанавливает значение по умолчанию для поля
                    default_factory         функция, генерирующая значение динамически! при создании нового объекта
                                            (default_factory=lambda: uuid4().hex)
                    alias                   альтернативное имя поля для сериализации и десериализации
                    title                   заголовок поля для документации
                    description             описание поля для документации
                    exclude                 исключает поле из сериализации
                    repr                    определяет, будет ли поле включено в строковое представление модели (repr=True)
                    gt, ge, lt, le          для числовых ограничений (gt=0 — значение должно быть больше нуля)
                    max_length, min_length  для строковых полей (max_length=50 - строка должна содержать не более 50 символов)
                    regex                   для проверки по регулярному выражению
                                            (regex=r"^\+\d{1,3}\s?\d{4,14}$" - должно соответствовать формату)


Пример базовой модели:

        from pydantic import BaseModel, Field
        class User(BaseModel):
            name: str
            email: str = Field(..., alias='email_address')



Декоратор @field_validator — позволяет добавлять кастомную логику валидации поля. 
Вызывается при создании или изменении модели. field_validator может быть использован 
не только для преобразования данных, но и для строгой проверки их корректности. 

        from pydantic import BaseModel, field_validator
        class User(BaseModel):
            age: int

            @field_validator('age', mode='before')
            def check_age(cls, value):
                if value < 18:
                    raise ValueError('Возраст должен быть больше 18 лет')
                return value

mode='before' - указывает Pydantic на необходимость выполнения валидации и преобразования данных
до создания экземпляра модели, а не после. Другой вариант - mode='after'



Декоратор @model_validator - валидация модели в целом, после того как все поля уже прошли индивидуальную проверку.
Это позволяет выполнять комплексные проверки, зависящие от нескольких полей модели одновременно.
mode='after' - после валидации отдельных полей


        class User(BaseModel):

            ...

            @model_validator(mode='after')
            def check_age(self):
                today = date.today()
                age = today.year - self.birthday_date.year - (
                    (today.month, today.day) < (self.birthday_date.month, self.birthday_date.day))

                if age < 18:
                    raise ValueError("Пользователь должен быть старше 18 лет")
                if age > 120:
                    raise ValueError("Возраст не может превышать 120 лет")
                return self


            @model_validator(mode='after')
            def set_default_name(self):
                if self.name.strip() == '':
                    self.name = f"User_{self.id}"
                return self




Декоратор @computed_field — новое поле (добавляется к модели), которое вычисляется
на основе других данных в модели. Вычисляемые поля можно комбинировать с model_validate.

        from pydantic import BaseModel, computed_field
        class User(BaseModel):
            name: str
            surname: str

            @computed_field
            def full_name(self) -> str:
                return f"{self.name} {self.surname}"



ORM
1) Чтобы настроить модель для работы с ORM, необходим параметр ConfigDict с флагом from_attributes=True:

        from pydantic import BaseModel, ConfigDict

        class User(BaseModel):
            ...

            model_config = ConfigDict(from_attributes=True)


2) Для создания модели Pydantic из объекта ORM используется метод from_orm:

        user = User.from_orm(orm_instance)

3) model_dump() — преобразуют модель в словарь Python:

        data = user.model_dump()

4) model_dump_json() — преобразуют модель в JSON-строку:

        json_data = user.model_dump_json()

5) Передача данных в модель:

        user = User(name="Maks", age=24)

