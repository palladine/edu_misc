1.

from fastapi import FastAPI

app = FastAPI()

@app.get('/hi')
def hi():
    return 'Success!'


if __name__ == "__main__":
    import uvicorn
    uvicorn.run('main:app', reload=True)

--------------------------------------------------------------------
2. Параметр в url

@app.get('/hi/{name}')
def hi(name):
    return f'Hello, {name} !'

--------------------------------------------------------------------
3. Параметры запроса — это строки name=value после символа ? в URL-адресе,
разделенные символами &.
пр. 127.0.0.1:8000/hi?name=Maks&fam=D

from fastapi import FastAPI, Request
@app.get('/hi')
def hi(request: Request):
    return request.query_params

---------------------------------------------------------------------
4. Получение значений из тела запроса + post method

from typing import Any, Dict
@app.post('/hi')
def hip(datas=Dict[Any, Any]):
    return datas

---------------------------------------------------------------------
5. Получение заголовков

@app.post('/headers')
def hip(request: Request):
    return request.headers

----------------------------------------------------------------------
6. Установка заголовка

from fastapi import FastAPI, Response
@app.post('/hish')
def hish(response: Response):
    response.headers['Client-Name'] = 'User'
    return 'Done'

----------------------------------------------------------------------
7. Типы ответов
from fastapi.responses import
JSONResponse,
HTMLResponse,
PlainTextResponse,
RedirectResponse,
FileResponse,
StreamingResponse


----------------------------------------------------------------------
8. Определение модели Pydantic

models.py
...
from pydantic import BaseModel
...
class Human(BaseModel):
    name: str
    age: float
    profession: str
...


----------------------------------------------------------------------
9. Формирование источника данных (единичную запись и список записей)

datas.py
...
from models import Human



super_human = Human(
    name='God',
    age=float('inf'),
    profession='god'
)



_humans: list[Human] = [
    Human(
        name='First',
        age=30.0,
        profession='coder'
    ),
    Human(
        name='Second',
        age=35.0,
        profession='developer'
    )
]
...


----------------------------------------------------------------------
10. Возврат json веб клиенту

...
@app.get('/humans')
async def get_humans() -> list[Human]:
    return _humans
...


----------------------------------------------------------------------
11. Проверка (validation) полей записи

models.py
...
from pydantic import BaseModel, Field
...
class HumanAlt(BaseModel):
    name: str | None = Field(default=None, max_length=3)
    age: float
    profession: str

















